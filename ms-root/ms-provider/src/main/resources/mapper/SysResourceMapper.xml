<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.train.mapper.SysResourceMapper" >
  <resultMap id="BaseResultMap" type="com.train.model.SysResource" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="resource_name" property="resourceName" jdbcType="VARCHAR" />
    <result column="resource_type" property="resourceType" jdbcType="INTEGER" />
    <result column="resource_code" property="resourceCode" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="resource_url" property="resourceUrl" jdbcType="VARCHAR" />
    <result column="level" property="level" jdbcType="INTEGER" />
    <result column="seq" property="seq" jdbcType="INTEGER" />
    <result column="icon" property="icon" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="parent_name" property="parentName" jdbcType="VARCHAR" />
  </resultMap>

  <select id="getResourceCountByRole" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(DISTINCT re.id)
    LEFT JOIN sys_role_resource rr ON rr.resource_id = re.id
    LEFT JOIN sys_role ro ON rr.role_id= ro.id
    <where>
      <include refid="queryConditionForGetResource"/>
    </where>
  </select>

  <select id="getResourceListByRole" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT DISTINCT re.*
    FROM sys_resource re
    LEFT JOIN sys_role_resource rr ON rr.resource_id = re.id
    LEFT JOIN sys_role ro ON rr.role_id= ro.id
    <where>
      <include refid="queryConditionForGetResource"/>
    </where>
    ORDER BY re.parent_id ASC, re.seq ASC
    <if test="start != null and limit != null">
      LIMIT #{start}, #{limit}
    </if>
  </select>

  <select id="getResourceCountByUser" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(DISTINCT re.id)
    FROM sys_resource re
    LEFT JOIN sys_role_resource rr ON rr.resource_id = re.id
    LEFT JOIN sys_role ro ON rr.role_id= ro.id
    LEFT JOIN sys_user_role ur ON ro.id = ur.role_id
    LEFT JOIN sys_user u ON ur.user_id = u.id
    <where>
      <include refid="queryConditionForGetResource"/>
    </where>
  </select>

  <select id="getResourceListByUser" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT DISTINCT re.*
    FROM sys_resource re
    LEFT JOIN sys_role_resource rr ON rr.resource_id = re.id
    LEFT JOIN sys_role ro ON rr.role_id= ro.id
    LEFT JOIN sys_user_role ur ON ro.id = ur.role_id
    LEFT JOIN sys_user u ON ur.user_id = u.id
    <where>
      <include refid="queryConditionForGetResource"/>
    </where>
    ORDER BY re.parent_id ASC, re.seq ASC
    <if test="start != null and limit != null">
      LIMIT #{start}, #{limit}
    </if>
  </select>

  <select id="getResourceCountByResource" resultType="java.lang.Integer" parameterType="java.util.Map" >
    SELECT COUNT(DISTINCT re.id)
    FROM sys_resource re
    LEFT JOIN sys_resource pr on re.parent_id = pr.id
    <where>
      <include refid="queryConditionForGetResource"/>
    </where>
  </select>

  <select id="getResourceListByResource" resultMap="BaseResultMap" parameterType="java.util.Map" >
    SELECT DISTINCT re.*, pr.resource_name AS parent_name
    FROM sys_resource re
    LEFT JOIN sys_resource pr on re.parent_id = pr.id
    <where>
      <include refid="queryConditionForGetResource"/>
    </where>
    <choose>
      <when test="sort !=null and order !=null">
        ORDER  BY re.${sort} ${order}
      </when>
      <otherwise>
        ORDER BY re.parent_id ASC, re.seq ASC
      </otherwise>
    </choose>
    <if test="start != null and limit != null">
      LIMIT #{start}, #{limit}
    </if>
  </select>

  <sql id="queryConditionForGetResource">
    <if test="userId != null">
      AND u.id=#{userId}
    </if>
    <if test="userIdAry != null">
      AND u.id IN
      <foreach collection="userIdAry" separator="," open="("  close=")" item="userIdItem" index="index">
        #{userIdItem}
      </foreach>
    </if>
    <if test="roleId != null">
      AND ro.id=#{roleId}
    </if>
    <if test="roleIdAry != null">
      AND ro.id IN
      <foreach collection="roleIdAry" separator="," open="("  close=")" item="roleItem" index="index">
        #{roleItem}
      </foreach>
    </if>
    <if test="parentId != null">
      AND re.parent_id=#{parentId}
    </if>
    <if test="resourceId != null">
      AND re.id=#{resourceId}
    </if>
    <if test="resourceIdAry != null">
      AND re.id IN
      <foreach collection="resourceIdAry" separator="," open="("  close=")" item="resourceIdItem" index="index">
        #{resourceIdItem}
      </foreach>
    </if>
    <if test="resourceType != null">
      AND re.resource_type=#{resourceType}
    </if>
    <if test="resourceTypeAry != null">
      AND re.resource_type IN
      <foreach collection="resourceTypeAry" separator="," open="("  close=")" item="resourceTypeItem" index="index">
        #{resourceTypeItem}
      </foreach>
    </if>
    <if test="resourceName != null">
      AND re.resource_name LIKE concat("%", #{resourceName}, "%")
    </if>
  </sql>

  <select id="getById" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    SELECT re.*, pr.resource_name AS parent_name
    FROM sys_resource re
    LEFT JOIN sys_resource pr on re.parent_id = pr.id
    WHERE re.id=#{id}
  </select>

  <insert id="insertResource" parameterType="com.train.model.SysResource">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_resource (resource_name, resource_type, resource_code, parent_id, resource_url,
    seq, icon, description, create_time, update_time)
    values (#{resourceName}, #{resourceType}, #{resourceCode}, #{parentId}, #{resourceUrl},
    #{seq}, #{icon}, #{description}, now(), now())
    ON DUPLICATE KEY UPDATE update_time = now()
  </insert>

  <update id="updateResource" parameterType="com.train.model.SysResource">
    UPDATE sys_resource
    SET resource_name = #{resourceName},
    resource_type = #{resourceType},
    resource_code = #{resourceCode},
    resource_url =  #{resourceUrl},
    seq = #{seq},
    icon = #{icon},
    description = #{description},
    update_time = now()
    WHERE id = #{id}
  </update>
</mapper>